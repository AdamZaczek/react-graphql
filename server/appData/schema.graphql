schema {
  query: NobodysStoriesSchema
  mutation: NobodysStoriesMutations
}

type Comment implements Node {
  # The ID of an object
  id: ID!
  _author: User
  _story: Story
  summary: String
  content: String
  createdAt: String
}

type NobodysStoriesMutations {
  # Create a new story
  createStory(_author: String!, content: String!): Story

  # Create a new user
  createUser(email: String!, password: String!): User

  # Create a new comment
  createComment(_author: String!, _story: String!, content: String!): Comment
}

# Root query
type NobodysStoriesSchema {
  # Fetches an object given its ID
  node(
    # The ID of an object
    id: ID!
  ): Node

  # List of stories prepared for pagination
  storiesQuery(after: String, first: Int, before: String, last: Int): StoryConnection

  # Story by _id
  storyQuery(id: String!): Story

  # Latest story
  latestStoryQuery: Story

  # Recent story
  recentStoriesQuery(
    # Number of recent stories
    count: Int!
  ): [Story]

  # Available users
  usersQuery: [User]

  # User by _id
  userQuery(id: String!): User
}

# An object with an ID
interface Node {
  # The id of the object.
  id: ID!
}

# Information about pagination in a connection.
type PageInfo {
  # When paginating forwards, are there more items?
  hasNextPage: Boolean!

  # When paginating backwards, are there more items?
  hasPreviousPage: Boolean!

  # When paginating backwards, the cursor to continue.
  startCursor: String

  # When paginating forwards, the cursor to continue.
  endCursor: String
}

enum Reactions {
  LIKE
  DISLIKE
  LOVE
  ANGER
}

# Represent the type of a story
type Story implements Node {
  # The ID of an object
  id: ID!
  summary: String
  content: String
  createdAt: String
  comments(
    # Limit the returning comments
    limit: Int
  ): [Comment]
  _author: User
}

# A connection to a list of items.
type StoryConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [StoryEdge]

  # A count of a total number of Stories in this connection
  totalCount: Int
}

# An edge in a connection.
type StoryEdge {
  # The item at the end of the edge
  node: Story

  # A cursor for use in pagination
  cursor: String!
}

# Represents user of the application
type User implements Node {
  # The ID of an object
  id: ID!
  name: String
  email: String
  password: String
  createdAt: String
  updatedAt: String

  # List of stories prepared for pagination
  writtenStories(after: String, first: Int, before: String, last: Int): StoryConnection

  # List stories user reacted to
  storiesWithReactions(
    # Limit the returning liked comments
    limit: Int

    # Search only for certain reactions
    reactionType: Reactions
  ): [Story]

  # List comments user reacted to
  commentsWithReactions(
    # Limit the returning liked comments
    limit: Int

    # Search only for certain reactions
    reactionType: Reactions
  ): [Comment]
}
